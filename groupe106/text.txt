Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
operators)
• Loops (e.g., while)
• Function definition (e.g., function, def, defun, etc): they must be able to take parameters and
return a value.
• Array and map access (e.g., array[index], map[key]) as well as function call (e.g., foo(1, 2))
• Printing to stdout (e.g., System.out.println, print) (will typically be a function)
• a way to pass string parameters to the program: it could be a main method or could be implicit
$1, $2, .
Through the year, you will build your very own language by group of 2 (we won’t allow smaller or
larger groups). We do not impose limits on what you can do, but we require that you support at least
the following set of features
• Literals: Integer (at least 32-bits signed precision, 1, -999, ...), Strings ("Hello"), boolean
• Comments (e.g, //, #)
• Variable definitions (e.g., var or let)
• Simple arithmetic (at least +, -, *, /, %) with priority of operations (i.e., 1 + 2 * 3 is equivalent
to 1 + (2 * 3)).
• Conditions (e.g., if). You should be able to compare: two integers; two variables; one integer
and one variable; two boolean values and compositions of these (at least the ’and’, ’or’ and ’not’
